import "customGameSettings.lobby";

globalvar Team PowerupTeam;

playervar Number[] powerupInventory = [
  WorkshopSettingInteger("Starter Inventory", "Full Health Potions",    0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Immortality Potions",    0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Self-Resurrect Totems",  0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Damage Boost Stims",     0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Speed Boost Stims",      0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Invisibility Dust Bags", 0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Shrinking Tablets",      0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Giant Juice Vials",      0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Cooldown Hasteners",     0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Smoke Bombs",            0, 0, 20),
  WorkshopSettingInteger("Starter Inventory", "Insta-Ult Packs",        0, 0, 20)
];
playervar Number powerupIndex;
playervar Boolean canActivatePowerupFlag = false;
playervar String lastPowerupName;
playervar Boolean inventoryIsEmpty; // Caches inventory status
playervar Any transformEffect;
playervar Number credits; // TODO: Implement costs and purchasing

enum PowerupType {
  FULL_HEALTH,
  IMMORTALITY,
  SELF_RES,
  DAMAGE_BOOST,
  SPEED_BOOST,
  INVISIBILITY,
  SHRINKING,
  ENLARGENING,
  COOLDOWN_HASTE,
  BLINDNESS,
  INSTA_ULT
}
// ABILITY NAME                                                                        ITEM PRICE                                                                     ITEM COLOR
globalvar Any[][] powerupData = [
  [<"<0> Full Health Potion", AbilityIconString(Hero.Baptiste, Button.Ability1)>,      WorkshopSettingInteger("Item Prices", "Full Health Potion",   20, 0, 100),    CustomColor(230, 81,  81,  255) ],
  [<"<0> Immortality Potion", AbilityIconString(Hero.Baptiste, Button.Ability2)>,      WorkshopSettingInteger("Item Prices", "Immortality Potion",   30, 0, 100),    CustomColor(123, 255, 200, 255) ],
  [<"<0> Self-Resurrect Totem", AbilityIconString(Hero.Mercy, Button.Ability2)>,       WorkshopSettingInteger("Item Prices", "Self-Resurrect Totem", 70, 0, 100),    CustomColor(255, 236, 127, 255) ],
  [<"<0> Damage Boost Stim", AbilityIconString(Hero.Ana, Button.Ultimate)>,            WorkshopSettingInteger("Item Prices", "Damage Boost Stim",    10, 0, 100),    CustomColor(169, 255, 252, 255) ],
  [<"<0> Speed Boost Stim", AbilityIconString(Hero.Reinhardt, Button.Ability1)>,       WorkshopSettingInteger("Item Prices", "Speed Boost Stim",     10, 0, 100),    CustomColor(132, 204, 101, 255) ],
  [<"<0> Invisibility Dust", IconString(Icon.Eye)>,                                    WorkshopSettingInteger("Item Prices", "Invisibility Dust",    25, 0, 100),    CustomColor(102, 95,  231, 255) ],
  [<"<0> Shrinking Tablet", AbilityIconString(Hero.WreckingBall, Button.Crouch)>,      WorkshopSettingInteger("Item Prices", "Shrinking Tablet",     10, 0, 100),    CustomColor(170, 120, 230, 255) ],
  [<"<0> Giant Juice", AbilityIconString(Hero.Baptiste, Button.Crouch)>,               WorkshopSettingInteger("Item Prices", "Giant Juice",          10, 0, 100),    CustomColor(159, 43,  43,  255) ],
  [<"<0> Cooldown Hastener", AbilityIconString(Hero.Lucio, Button.Ability2)>,          WorkshopSettingInteger("Item Prices", "Cooldown Hastener",    10, 0, 100),    CustomColor(252, 175, 203, 255) ],
  [<"<0> Smoke Bomb", IconString(Icon.Dizzy)>,                                         WorkshopSettingInteger("Item Prices", "Smoke Bomb",           10, 0, 100),    CustomColor(200, 200, 200, 255) ],
  [<"<0> Insta-Ult Pack", AbilityIconString(Hero.Torbjorn, Button.Ability2)>,          WorkshopSettingInteger("Item Prices", "Insta-Ult Pack",       10, 0, 100),    CustomColor(255, 196, 40,  255) ]
];
enum PowerupDataKey {
  Name,
  Price,
  Color
}

rule: "Set Powerup Team - not in global initialization rule to ensure ordering" -1
{
  PowerupTeam = [Team.Team1, Team.Team2][WorkshopSettingCombo("Settings", "Powerups Team", 0, ["Team 1", "Team 2"], 0)];
}

rule: 'Interact to use Powerup'
Event.OngoingPlayer
if (TeamOf(EventPlayer()) == PowerupTeam)
if (IsButtonHeld(Button: Button.Interact))
{
  CheckUse();
  if (!canActivatePowerupFlag) {
    SmallMessage(EventPlayer(), <"<0> can't be used right now!", powerupData[powerupIndex][PowerupDataKey.Name]>);
    PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 50);
    # Prevent spam
    Wait(0.25);
    return;
  }
  UseCurrentPower();
}

void CheckUse() "[SUB] Can player use the currently selected powerup?"
{
  # Check current powerup, and cancel if empty
  if (powerupInventory[powerupIndex] == 0) {
    return;
  }
  # Cannot use by default
  canActivatePowerupFlag = false;
  switch(powerupIndex) {
    case PowerupType.FULL_HEALTH:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && Health(EventPlayer()) < MaxHealth(EventPlayer());
      break;
    case PowerupType.IMMORTALITY:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && immortalityTimer == 0;
      break;
    case PowerupType.SELF_RES:
      canActivatePowerupFlag = IsDead(EventPlayer());
      break;
    case PowerupType.DAMAGE_BOOST:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && (canStackDamageBoosts || CountOf(damageBoostExpiryTimes) == 0);
      break;
    case PowerupType.SPEED_BOOST:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && (canStackSpeedBoosts || CountOf(speedBoostExpiryTimes) == 0);
      break;
    case PowerupType.INVISIBILITY:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && invisibilityTimer == 0;
      break;
    case PowerupType.SHRINKING:
    case PowerupType.ENLARGENING:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && shrinkTimer == 0 && giantTimer == 0;
      break;
    case PowerupType.COOLDOWN_HASTE:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && cooldownHasteTimer == 0;
      break;
    case PowerupType.BLINDNESS:
      canActivatePowerupFlag = IsAlive(EventPlayer());
      break;
    case PowerupType.INSTA_ULT:
      canActivatePowerupFlag = IsAlive(EventPlayer()) && UltimateChargePercent(EventPlayer()) < 100;
      break;
  }
}

void UseCurrentPower() "[SUB] Dispatcher for powerup use event"
{
  switch(powerupIndex) {
    case PowerupType.FULL_HEALTH:
      async useFullRestore();
      break;
    case PowerupType.IMMORTALITY:
      useImmortality();
      break;
    case PowerupType.SELF_RES:
      resSelf();
      break;
    case PowerupType.DAMAGE_BOOST:
      useDamageBooster();
      break;
    case PowerupType.SPEED_BOOST:
      useSpeedBooster();
      break;
    case PowerupType.INVISIBILITY:
      useInvisibility();
      break;
    case PowerupType.SHRINKING:
      useShrink();
      break;
    case PowerupType.ENLARGENING:
      useGiant();
      break;
    case PowerupType.COOLDOWN_HASTE:
      useCooldownHaste();
      break;
    case PowerupType.BLINDNESS:
      useSmokeBomb();
      break;
    case PowerupType.INSTA_ULT:
      useInstaUlt();
      break;
  }
  # Decrement inventory of powerups
  powerupInventory[powerupIndex] -= 1;
  # Confirm use (cache name to avoid deferment issues)
  lastPowerupName = powerupData[powerupIndex][PowerupDataKey.Name];
  SmallMessage(EventPlayer(), <"Used <0>", lastPowerupName>);
  # Select next available option if out now
  if (powerupInventory[powerupIndex] == 0) {
    incrementPowerupIndex();
    # If we're still at 0, there's nothing left in the inventory.
    if (powerupInventory[powerupIndex] == 0) {
      inventoryIsEmpty = true;
    }
  }
}

rule: "Initialize player HUD"
Event.OnPlayerJoin
if (TeamOf(EventPlayer()) == PowerupTeam)
{
  CreateHudText(
    VisibleTo:          EventPlayer(),
    Header:             inventoryIsEmpty
                        ? "   No Items   "
                        : <" < [<1> + <2>]       <0> [<4>]       [<1> + <3>] > ",
                            powerupData[powerupIndex][PowerupDataKey.Name],
                            InputBindingString(Button.Reload),
                            InputBindingString(Button.PrimaryFire),
                            InputBindingString(Button.SecondaryFire),
                            powerupInventory[powerupIndex]
                        >,
    Subheader:          " ",
    Text:               " ",
    Location:           Location.Top,
    SortOrder:          3,
    HeaderColor:        powerupData[powerupIndex][PowerupDataKey.Color],
    Reevaluation:       HudTextRev.VisibleToAndString,
    Spectators:         Spectators.DefaultVisibility
  );
}

rule: "Scroll forward and back between usable items"
Event.OngoingPlayer
if (TeamOf(EventPlayer()) == PowerupTeam)
if (IsButtonHeld(Button: Button.Reload))
if (IsButtonHeld(Button: Button.PrimaryFire) || IsButtonHeld(Button: Button.SecondaryFire))
{
  AbortIf(CountOf(FilteredArray(powerupInventory, ArrayElement() > 0)) < 2);
  if (IsButtonHeld(Button: Button.PrimaryFire)) {
    decrementPowerupIndex();
  } else if (IsButtonHeld(Button: Button.SecondaryFire)) {
    incrementPowerupIndex();
  }
}

rule: "Disable selection buttons"
Event.OngoingPlayer
if (IsButtonHeld(Button: Button.Reload))
{
  DisallowButton(Button: Button.PrimaryFire);
  DisallowButton(Button: Button.SecondaryFire);
  WaitUntil(
    ContinueCondition:          !IsButtonHeld(Button: Button.Reload),
    Timeout:                    9999
  );
  AllowButton(Button: Button.PrimaryFire);
  AllowButton(Button: Button.SecondaryFire);
}

playervar Number explorePowerupIndex;

void decrementPowerupIndex() "[SUB] Find next valid powerupIndex in the negative direction"
{
  explorePowerupIndex = powerupIndex - 1;
  while (powerupInventory[explorePowerupIndex] == 0 && explorePowerupIndex != powerupIndex) {
    explorePowerupIndex -= 1;
    if (explorePowerupIndex < 0) {
      explorePowerupIndex = CountOf(powerupData) - 1;
    }
  }
  powerupIndex = explorePowerupIndex;
}

void incrementPowerupIndex() "[SUB] Find next valid powerupIndex in the positive direction" {
  explorePowerupIndex = powerupIndex + 1;
  while (powerupInventory[explorePowerupIndex] == 0 && explorePowerupIndex != powerupIndex) {
    explorePowerupIndex += 1;
    if (explorePowerupIndex >= CountOf(powerupData)) {
      explorePowerupIndex = 0;
    }
  }
  powerupIndex = explorePowerupIndex;
}

import "powerups/fullRestore.ostw";
import "powerups/immortality.ostw";
import "powerups/selfRes.ostw";
import "powerups/damageBoost.ostw";
import "powerups/speedBoost.ostw";
import "powerups/invisibility.ostw";
import "powerups/shrinking.ostw";
import "powerups/giant.ostw";
import "powerups/cooldownHaste.ostw";
import "powerups/smokeBomb.ostw";
import "powerups/instaUlt.ostw";

// TODO: Automatically choose a new powerup when the current one is exhausted
// TODO: Create powerup selection interface

import "debug.ostw";
