import "../main.ostw";
import "MapData.ostw";
import "../OSTWUtils/OnScreenText.del";

globalvar Number initialCredits;
globalvar Number buyPhaseDuration = WorkshopSettingInteger("Buy Phase", "Buy Phase Length", 90, 10, 180);
globalvar Number buyPhaseTimer = buyPhaseDuration;
globalvar Vector menuPosition = ArrayContains(maps, CurrentMap()) ? mapData[IndexOfArrayValue(maps, CurrentMap())][0] : Vector(0, 150, 0);
globalvar Vector menuFacing = ArrayContains(maps, CurrentMap()) ? mapData[IndexOfArrayValue(maps, CurrentMap())][1] : Forward();
globalvar Any backdropEffect;
globalvar Number[] menuIWTs = [];
globalvar Number[] menuIWProgressBars = [];
globalvar Number index;

playervar BuyMenuState menuState;
enum BuyMenuState {
  INACTIVE,
  MAIN_SCREEN,
  CONSUMABLES,
  TALENTS
}
playervar Number selectionIndex;
playervar Number credits = initialCredits; // TODO: Implement costs and purchasing

Player[] PowerupPlayersMenu(Boolean additionalCondition = true): FilteredArray(AllPlayers(PowerupTeam), ArrayElement().menuState != BuyMenuState.INACTIVE && additionalCondition);

rule: "[Buy Menu] Global interface setup"
{
  backdropEffect = CreateEffect(
    VisibleTo:            AllPlayers(),
    Type:                 Effect.Orb,
    Color:                Color.Black,
    Position:             menuPosition - 0.32 * menuFacing,
    Radius:               1,
    Reevaluation:         EffectRev.VisibleToPositionAndRadius
  );
  CreateProgressBarInWorldText(
    VisibleTo:            AllPlayers(),
    Value:                buyPhaseTimer * 100 / buyPhaseDuration,
    Text:                 <@"Buy Phase">,
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, 0, 1.3),
    Scale:                1.5,
    Clipping:             Clipping.DoNotClip,
    Reevaluation:         ProgressBarWorldEvaluation.VisibleToAndValues
  );
  ModifyVariable(menuIWProgressBars, Operation.AppendToArray, LastTextID());
  CreateInWorldText(
    VisibleTo:            AllPlayers(),
    Header:               RoundToInteger(buyPhaseTimer, Rounding.Up),
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, 0, 1),
    Scale:                4,
    Reevaluation:         InworldTextRev.VisibleToPositionAndString,
    Clipping:             Clipping.DoNotClip
  );
  ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
}

rule: "[BUY MENU] Control flow"
if (buyPhaseTimer > 0)
{
  CreateSharedShopUI();
  ChaseVariableAtRate(buyPhaseTimer, 0, 1, RateChaseReevaluation.None);
  WaitUntil(buyPhaseTimer == 0, 1000000);
  StartGameMode();
  DestroyShop();
}

void CreateSharedShopUI() "[BUY MENU | SUB] Create shared shop UI"
{
  # Main menu stuff
  CreateInWorldText(
    VisibleTo:            PowerupPlayersMenu(ArrayElement().menuState == BuyMenuState.MAIN_SCREEN),
    Header:               <"<0>Consumables <1>", LocalPlayer().selectionIndex ? "" : "▶ ", IconString(Icon.Poison2)>,
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, -1, 0),
    Scale:                2.5,
    Clipping:             Clipping.DoNotClip,
    Reevaluation:         InworldTextRev.VisibleToPositionAndString,
    TextColor:            Color.Purple
  );
  ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
  CreateInWorldText(
    VisibleTo:            PowerupPlayersMenu(ArrayElement().menuState == BuyMenuState.MAIN_SCREEN),
    Header:               <"<0>Talents <1>", LocalPlayer().selectionIndex == 1 ? "▶ " : "", AbilityIconString(Hero.Genji, Button.Jump)>,
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, 1, 0),
    Scale:                2.5,
    Clipping:             Clipping.DoNotClip,
    Reevaluation:         InworldTextRev.VisibleToPositionAndString,
    TextColor:            Color.Yellow
  );
  ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
  // Consumables
  for (index = 0; RoundToInteger(CountOf(powerupData) / 2, Rounding.Up); 1) {
    CreateInWorldText(
      VisibleTo:            PowerupPlayersMenu(ArrayElement().menuState == BuyMenuState.CONSUMABLES),
      Header:               <"<1><0>", powerupData[EvaluateOnce(index)][PowerupDataKey.Name], LocalPlayer().selectionIndex == EvaluateOnce(index) ? "▶ " : "">,
      Position:             OnScreenText.WorldRender(menuPosition, menuFacing, -1.4, 0.7 - 0.3 * EvaluateOnce(index)),
      Scale:                1.5,
      Clipping:             Clipping.DoNotClip,
      Reevaluation:         InworldTextRev.VisibleToPositionAndString,
      TextColor:            powerupData[EvaluateOnce(index)][PowerupDataKey.Color]
    );
    ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
    index += RoundToInteger(CountOf(powerupData) / 2, Rounding.Up);
    if (index < CountOf(powerupData)) {
      CreateInWorldText(
        VisibleTo:            PowerupPlayersMenu(ArrayElement().menuState == BuyMenuState.CONSUMABLES),
        Header:               <"<1><0>", powerupData[EvaluateOnce(index)][PowerupDataKey.Name], LocalPlayer().selectionIndex == EvaluateOnce(index) ? "▶ " : "">,
        Position:             OnScreenText.WorldRender(menuPosition, menuFacing, 1.4, 0.7 - 0.3 * EvaluateOnce(index - RoundToInteger(CountOf(powerupData) / 2, Rounding.Up))),
        Scale:                1.5,
        Clipping:             Clipping.DoNotClip,
        Reevaluation:         InworldTextRev.VisibleToPositionAndString,
        TextColor:            powerupData[EvaluateOnce(index)][PowerupDataKey.Color]
      );
      ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
    }
    index -= RoundToInteger(CountOf(powerupData) / 2, Rounding.Up);
  }
  CreateInWorldText(
    VisibleTo:            TeamOf(LocalPlayer()) == PowerupTeam ? LocalPlayer() : null,
    Header:               <"Move to change selection\n        <0> - Select\n        <1> - Back", InputBindingString(Button.PrimaryFire), InputBindingString(Button.SecondaryFire)>,
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, -1.4, 1),
    Scale:                1.2,
    Clipping:             Clipping.DoNotClip,
    Reevaluation:         InworldTextRev.VisibleToPositionAndString,
    TextColor:            Color.Orange,
    Spectators:           Spectators.VisibleNever
  );
  ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
}

void CreatePersonalShopUI() "[BUY MENU | SUB] Create personal shop UI"
{
  CreateInWorldText(
    VisibleTo:            EventPlayer(),
    Header:               <"Coins: <0>", credits>,
    Position:             OnScreenText.WorldRender(menuPosition, menuFacing, 1.4, 1.1),
    Scale:                2,
    Clipping:             Clipping.DoNotClip,
    Reevaluation:         InworldTextRev.VisibleToPositionAndString,
    TextColor:            Color.Yellow,
  );
  ModifyVariable(menuIWTs, Operation.AppendToArray, LastTextID());
}

void DestroyShop() "[BUY MENU | SUB] Destroy shop UI" {
  while (menuIWTs != []) {
    DestroyInWorldText(FirstOf(menuIWTs));
    ModifyVariable(menuIWTs, Operation.RemoveFromArrayByIndex, 0);
  }
  while (menuIWProgressBars != []) {
    DestroyProgressBarInWorldText(FirstOf(menuIWProgressBars));
    ModifyVariable(menuIWProgressBars, Operation.RemoveFromArrayByIndex, 0);
  }
}

rule: "[BUY MENU | Main Screen] Left/right cursor movement"
Event.OngoingPlayer
if (TeamOf() == PowerupTeam)
if (menuState == BuyMenuState.MAIN_SCREEN)
if (AbsoluteValue(XOf(ThrottleOf())) > 0.5)
{
  selectionIndex += XOf(ThrottleOf()) > 0 ? -1 : 1;
  selectionIndex = Min(1, Max(0, selectionIndex));
}

rule: "[BUY MENU | Consumables] Left/right cursor movement"
Event.OngoingPlayer
if (TeamOf() == PowerupTeam)
if (menuState == BuyMenuState.CONSUMABLES)
if (AbsoluteValue(XOf(ThrottleOf())) > 0.5)
{
  selectionIndex = (selectionIndex + (XOf(ThrottleOf()) > 0 ? CountOf(powerupData) - 1 : 1) * RoundToInteger(CountOf(powerupData) / 2)) % CountOf(powerupData);
}

rule: "[BUY MENU | Consumables] Up/down cursor movement"
Event.OngoingPlayer
if (TeamOf() == PowerupTeam)
if (menuState == BuyMenuState.CONSUMABLES)
if (AbsoluteValue(ZOf(ThrottleOf())) > 0.5)
{
  selectionIndex = selectionIndex + (ZOf(ThrottleOf()) > 0 ? -1 : 1);
  # Wrap-around going up
  if (ZOf(ThrottleOf()) > 0) {
    if (selectionIndex == -1) {
      selectionIndex = RoundToInteger(CountOf(powerupData) / 2) - 1;
    } else if (selectionIndex == RoundToInteger(CountOf(powerupData) / 2) - 1) {
      selectionIndex = CountOf(powerupData) - 1;
    }
  # Wrap-around going down
  } else {
    if (selectionIndex == RoundToInteger(CountOf(powerupData) / 2)) {
      selectionIndex = 0;
    } else if (selectionIndex == CountOf(powerupData)) {
      selectionIndex = CountOf(powerupData) % 2 ? RoundToInteger(CountOf(powerupData) / 2) : 0;
    }
  }
  selectionIndex = Min(CountOf(powerupData) - 1, Max(0, selectionIndex));
}

rule: "[BUY MENU] Process primary fire"
Event.OngoingPlayer
if (TeamOf() == PowerupTeam)
if (menuState != BuyMenuState.INACTIVE)
if (IsButtonHeld(Button: Button.PrimaryFire))
{
  switch (menuState) {
    case BuyMenuState.MAIN_SCREEN:
      if (selectionIndex) {
        menuState = BuyMenuState.TALENTS;
      } else {
        menuState = BuyMenuState.CONSUMABLES;
      }
      selectionIndex = 0;
      break;
    case BuyMenuState.CONSUMABLES:
      if (credits < powerupData[selectionIndex][PowerupDataKey.Price]) {
        SmallMessage(EventPlayer(), <"Not Enough Coins">);
        PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, null, EventPlayer(), 200);
        Wait(0.25);
        return;
      }
      powerupInventory[selectionIndex] += 1;
      credits -= powerupData[selectionIndex][PowerupDataKey.Price];
      PlayEffect(EventPlayer(), PlayEffect.BuffImpactSound, null, EventPlayer(), 200);
      break;
  }
}

rule: "[BUY MENU] Return to main screen"
Event.OngoingPlayer
if (TeamOf() == PowerupTeam)
if (menuState > BuyMenuState.MAIN_SCREEN)
if (IsButtonHeld(Button: Button.SecondaryFire))
{
  selectionIndex = menuState - BuyMenuState.MAIN_SCREEN - 1;
  menuState = BuyMenuState.MAIN_SCREEN;
}

rule: "[BUY MENU] Put powerups team in purchase menu when buy timer is active"
Event.OngoingPlayer
if (buyPhaseTimer > 0)
{
  while (!HasSpawned()) {
    Wait(0.25);
    ForcePlayerHero(EventPlayer(), Hero.Zenyatta);
  }
  menuState = BuyMenuState.MAIN_SCREEN;
  WaitUntil(buyPhaseTimer == 0, 1000000);
  # Prevent race condition issues
  MinWait();
  StopForcingHero();
  menuState = BuyMenuState.INACTIVE;
}

rule: "[BUY MENU] Initialize and exit player menu"
Event.OngoingPlayer
if (menuState > BuyMenuState.INACTIVE)
{
  # Disable all HUD elements
  DisableAllHud();
  # Disable all ability buttons
  DisableAllButtons();
  SetInvisible(EventPlayer(), InvisibleTo.All);
  SetMoveSpeed(EventPlayer(), 0.001);
  StartCamera(EventPlayer(), menuPosition, menuPosition + menuFacing);
  StartForcingPlayerPosition(EventPlayer(), menuPosition - menuFacing, false);
  # Automatically cleaned up by shop UI destruction
  CreatePersonalShopUI();

  WaitUntil(menuState == BuyMenuState.INACTIVE, 1000000);
  Wait(1);

  # Re-enable all HUD
  EnableAllHud();
  # Re-enable all buttons
  EnableAllButtons();
  SetInvisible(EventPlayer(), InvisibleTo.None);
  SetMoveSpeed(EventPlayer(), baseMoveSpeed);
  StopCamera(EventPlayer());
  StopForcingPlayerPosition(EventPlayer());
}

// TODO: Create talents screen

// HELPER FUNCTIONS

void DisableAllHud() {
    DisableGameModeHud();
    DisableGameModeInworldUI();
    DisableHeroHud();
    DisableScoreboard();
}

void EnableAllHud() {
    EnableGameModeHud();
    EnableGameModeInworldUI();
    EnableHeroHud();
    EnableScoreboard();
}

void DisableAllButtons() {
  DisallowButton(EventPlayer(), Button.PrimaryFire);
  DisallowButton(EventPlayer(), Button.SecondaryFire);
  DisallowButton(EventPlayer(), Button.Ability1);
  DisallowButton(EventPlayer(), Button.Ability2);
  DisallowButton(EventPlayer(), Button.Ultimate);
  DisallowButton(EventPlayer(), Button.Jump);
  DisallowButton(EventPlayer(), Button.Crouch);
  DisallowButton(EventPlayer(), Button.Melee);
  DisallowButton(EventPlayer(), Button.Reload);
}

void EnableAllButtons() {
  AllowButton(EventPlayer(), Button.PrimaryFire);
  AllowButton(EventPlayer(), Button.SecondaryFire);
  AllowButton(EventPlayer(), Button.Ability1);
  AllowButton(EventPlayer(), Button.Ability2);
  AllowButton(EventPlayer(), Button.Ultimate);
  AllowButton(EventPlayer(), Button.Jump);
  AllowButton(EventPlayer(), Button.Crouch);
  AllowButton(EventPlayer(), Button.Melee);
  AllowButton(EventPlayer(), Button.Reload);
}
