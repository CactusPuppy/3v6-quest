import "../main.ostw";
globalvar Number giantDuration = WorkshopSettingInteger("Giant Juice", "Giant Juice Duration", 12, 1, 60, 0);
globalvar Number giantScaleTarget = WorkshopSettingReal("Giant Juice", "Giant Juice Scale", 1.75, 1, 3, 1);
globalvar Number giantHealthScalar = WorkshopSettingReal("Giant Juice", "Giant Juice Health Scalar", 300, 100, 500, 1.5);
globalvar Number giantVoicelinePitchTarget = WorkshopSettingReal("Giant Juice", "Giant Juice Voiceline Pitch", 0.5, 0.5, 1, 2);

playervar Number giantTimer;
playervar Number giantScale = 1;
playervar Number giantPitch = 1;
playervar Any[] giantEffects = [];

void useGiant() "[SUB] Giant Juice effects"
{
  StartScalingPlayer(EventPlayer(), giantScale, true);
  StartModifyingHeroVoiceLines(EventPlayer(), giantPitch, true);

  ChaseVariableOverTime(giantScale, giantScaleTarget, 0.4, TimeChaseReevaluation.None);
  ChaseVariableOverTime(giantPitch, giantVoicelinePitchTarget, 0.4, TimeChaseReevaluation.None);

  PlayEffect(AllPlayers(), PlayEffect.BrigitteRepairPackImpactEffect, <Color>TeamOf(EventPlayer()), EventPlayer(), 2);
  PlayEffect(AllPlayers(), PlayEffect.ZaryaParticleCannonExplosionEffect, <Color>TeamOf(EventPlayer()), PositionOf(EventPlayer()), giantScaleTarget);
  PlayEffect(AllPlayers(), PlayEffect.OrisaHaltImplosionSound, null, PositionOf(EventPlayer()), 200);
  CreateEffect(AllPlayers(), Effect.WinstonPrimalRageEffect, <Color>TeamOf(EventPlayer()), EventPlayer(), 1, EffectRev.VisibleTo);
  ModifyVariable(giantEffects, Operation.AppendToArray, LastCreatedEntity());
  transformEffect = CreateEffect(AllPlayers(), Effect.EchoCloningEffect, <Color>TeamOf(EventPlayer()), EventPlayer(), 1, EffectRev.VisibleTo);

  giantTimer = giantDuration;
  Wait(0.4 - 0.016);

  DestroyEffect(transformEffect);
  PlayEffect(AllPlayers(), PlayEffect.ZaryaParticleCannonExplosionSound, null, PositionOf(EventPlayer()), 200);
  SetMaxHealth(EventPlayer(), giantHealthScalar);
  ChaseVariableAtRate(giantTimer, 0, 1, RateChaseReevaluation.None);
  MinWait();
  SetPlayerHealth(EventPlayer(), giantHealthScalar / 100 * Health(EventPlayer()));
}

rule: "[GIANT] If player dies, cancel giant state"
Event.OnDeath
if (giantTimer > 0)
{
  giantTimer = 0;
}

rule: "[GIANT] Reset between rounds"
if (IsBetweenRounds())
{
  AllPlayers().giantTimer = 0;
}

rule: "[GIANT] On timer completion, revert giant state"
Event.OngoingPlayer
if (giantTimer > 0)
{
  WaitUntil(giantTimer == 0, 1000000);

  StopChasingVariable(giantTimer);
  ChaseVariableOverTime(giantScale, 1, 0.4, TimeChaseReevaluation.None);
  ChaseVariableOverTime(giantPitch, 1, 0.4, TimeChaseReevaluation.None);

  PlayEffect(AllPlayers(), PlayEffect.OrisaHaltImplosionEffect, <Color>TeamOf(EventPlayer()), EventPlayer(), giantScaleTarget);
  PlayEffect(AllPlayers(), PlayEffect.OrisaHaltImplosionSound, null, PositionOf(EventPlayer()), 200);
  transformEffect = CreateEffect(AllPlayers(), Effect.EchoCloningEffect, <Color>TeamOf(EventPlayer()), EventPlayer(), 1, EffectRev.VisibleTo);

  Wait(0.4 - 0.016);

  DestroyEffect(transformEffect);
  PlayEffect(AllPlayers(), PlayEffect.ZaryaParticleCannonExplosionSound, null, PositionOf(EventPlayer()), 200);
  while(CountOf(giantEffects) > 0) {
    DestroyEffect(FirstOf(giantEffects));
    ModifyVariable(giantEffects, Operation.RemoveFromArrayByIndex, 0);
  }
  SetMaxHealth(EventPlayer(), 100);
  StopScalingPlayer(EventPlayer());
  StopModifyingHeroVoiceLines(EventPlayer());
}
