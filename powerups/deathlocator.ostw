import "../main.ostw";
playervar Vector deathlocatorPosition = null;
playervar Vector deathlocatorFacing = null;
playervar Number cameraWaitTime;
playervar Any[] deathlocatorEffects = [];

void useDeathlocator() "[SUB] Deathlocator effects (BLOCKS)"
{
  if (deathlocatorPosition != null) {
    SmallMessage(EventPlayer(), <"You already have a deathlocator active!">);
    SmallMessage(EventPlayer(), <"[<0>] Replace existing deathlocator", InputBindingString(Button.Interact)>);
    WaitUntil(!IsButtonHeld(Button: Button.Interact), 9999);
    WaitUntil(
      IsButtonHeld(Button: Button.Interact)
      || powerupIndex != PowerupType.DEATHLOCATOR
      || deathlocatorPosition == null, 2);
    if (!IsButtonHeld(Button: Button.Interact)) {
      powerupWasNotConsumed = true;
      return;
    }
    if (deathlocatorEffects != []) CleanupDeathlocatorEffects();
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Yellow, deathlocatorPosition, 0.5);
  }
  deathlocatorPosition = PositionOf();
  deathlocatorFacing = FacingDirectionOf();
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.BrigitteRepairPackImpactEffect,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition,
    Radius:         200
  );
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.BrigitteWhipShotHealAreaSound,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition,
    Radius:         200
  );
  CreateEffect(
    VisibleTo:      AllPlayers(),
    Type:           Effect.Sphere,
    Color:          Color.Yellow,
    Position:       deathlocatorPosition,
    Radius:         0.1
  );
  ModifyVariable(deathlocatorEffects, Operation.AppendToArray, LastCreatedEntity());
  CreateEffect(
    VisibleTo:      AllPlayers(),
    Type:           Effect.Sparkles,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition,
    Radius:         0.1
  );
  ModifyVariable(deathlocatorEffects, Operation.AppendToArray, LastCreatedEntity());
}

rule: "[DEATHLOCATOR] On death, activate deathlocator if able"
Event.OnDeath
if (deathlocatorPosition != null)
{
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.TracerRecallDisappearEffect,
    Color:          <Color>TeamOf(),
    Position:       PositionOf(EventPlayer()) + Up(),
    Radius:         2
  );
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.TracerRecallDisappearSound,
    Color:          <Color>TeamOf(),
    Position:       PositionOf(EventPlayer()),
    Radius:         200
  );
  if (EventWasEnvironment()) {
    Teleport(EventPlayer(), NearestWalkablePosition(PositionOf(EventPlayer())));
      MinWait();
  }
  Resurrect();
  SetStatus(EventPlayer(), null, Status.PhasedOut, 10);
  SetInvisible(EventPlayer(), InvisibleTo.All);
  StartCamera(EventPlayer(), EyePosition(), EyePosition() + FacingDirectionOf(), 7);
  Wait(0.1);
  SetFacing(EventPlayer(), deathlocatorFacing);
  Teleport(EventPlayer(), deathlocatorPosition);
  Wait(0.5);
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.TracerRecallReappearEffect,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition + Up(),
    Radius:         2
  );
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.TracerRecallReappearSound,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition + Up(),
    Radius:         200
  );
  Wait(0.5);
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.GoodPickupEffect,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition + Up(),
    Radius:         2
  );
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.BuffExplosionSound,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition + Up(),
    Radius:         200
  );
  PlayEffect(
    VisibleTo:      AllPlayers(),
    Type:           PlayEffect.RingExplosionSound,
    Color:          <Color>TeamOf(),
    Position:       deathlocatorPosition + Up(),
    Radius:         200
  );
  SetInvisible(EventPlayer(), InvisibleTo.None);
  deathlocatorPosition = null;
  CleanupDeathlocatorEffects();
  StopCamera();
  ClearStatus(EventPlayer(), Status.PhasedOut);
}

void CleanupDeathlocatorEffects() "[SUB] Cleanup deathlocator effects"
{
  while (deathlocatorEffects != []) {
    DestroyEffect(FirstOf(deathlocatorEffects));
    ModifyVariable(deathlocatorEffects, Operation.RemoveFromArrayByIndex, 0);
  }
}
